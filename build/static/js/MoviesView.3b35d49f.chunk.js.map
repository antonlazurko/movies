{"version":3,"sources":["services/movie-api.tsx","services/Status.tsx","views/MoviesView.module.css","Components/Searchbar/Searchbar.tsx","views/MoviesView.tsx"],"names":["BASE_URL","AUTH_KEY","fetchMovies","a","url","fetch","response","ok","json","Promise","reject","Error","fetchPopularMovies","fetchMoviesByQuery","movieQuery","queryPage","fetchMovieDetails","movieId","fetchMovieCast","fetchMovieReviews","Status","IDLE","PENDING","RESOLVED","REJECTED","module","exports","useStyles","makeStyles","theme","createStyles","root","marginTop","searchBar","display","justifyContent","Searchbar","onSearchbarSubmit","classes","useState","searchQuery","setSearchQuery","className","onSubmit","evt","preventDefault","trim","toLowerCase","toast","noValidate","autoComplete","Input","placeholder","inputProps","value","type","autoFocus","onChange","e","currentTarget","Button","variant","color","size","startIcon","MoviesView","history","useHistory","location","useLocation","URLSearchParams","search","get","setMovieQuery","setQueryPage","movies","setMovies","status","setStatus","error","setError","useEffect","moviesAPI","then","results","prevState","window","scrollTo","top","document","documentElement","scrollHeight","behavior","catch","data","push","autoClose","position","List","length","s","listNotification","map","movie","ListItem","item","title","to","pathname","id","state","from","onClick","fontSize"],"mappings":"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","file":"static/js/MoviesView.3b35d49f.chunk.js","sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\r\nconst AUTH_KEY = 'd66f8875c56322c0e6582f80570eea14';\r\ntype TMovie = { id: string, name: string, title: string,poster_path:string,release_date:string }\r\n\r\ntype TFetchMoviesByQuery = (movieQuery: string, queryPage: number)=>Promise<{results:TMovie[]}>;\r\nasync function fetchMovies(url = '') {\r\n  const response = await fetch(url);\r\n  return response.ok\r\n    ? await response.json()\r\n    : Promise.reject(new Error('Not found'));\r\n}\r\nexport function fetchPopularMovies() {\r\n  return fetchMovies(`${BASE_URL}/trending/all/day?api_key=${AUTH_KEY}`);\r\n}\r\nexport const fetchMoviesByQuery:TFetchMoviesByQuery=(movieQuery, queryPage)=> {\r\n   return fetchMovies(\r\n    `${BASE_URL}/search/movie?api_key=${AUTH_KEY}&query=${movieQuery}&page=${queryPage}`,\r\n  );\r\n}\r\nexport function fetchMovieDetails(movieId:string) {\r\n  return fetchMovies(`${BASE_URL}/movie/${movieId}?api_key=${AUTH_KEY}`);\r\n}\r\nexport function fetchMovieCast(movieId:string) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/credits?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\nexport function fetchMovieReviews(movieId:string) {\r\n  return fetchMovies(\r\n    `${BASE_URL}/movie/${movieId}/reviews?api_key=${AUTH_KEY}`,\r\n  );\r\n}\r\n","const Status = {\r\n  IDLE: 'idle',\r\n  PENDING: 'pending',\r\n  RESOLVED: 'resolved',\r\n  REJECTED: 'rejected',\r\n};\r\nexport default Status;\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"MoviesView_list__15dqM\",\"item\":\"MoviesView_item__1Zm0g\",\"title\":\"MoviesView_title__K0mGv\",\"listNotification\":\"MoviesView_listNotification__vkVoa\"};","import React, { useState } from \"react\";\r\nimport { Button } from \"@material-ui/core\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { createStyles, Theme, makeStyles } from \"@material-ui/core/styles\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport { toast } from \"react-toastify\";\r\nimport \"react-toastify/dist/ReactToastify.css\";\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      marginTop: \"40px\",\r\n    },\r\n    searchBar: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n    },\r\n  })\r\n);\r\n\r\ntype TProps = {\r\n  onSearchbarSubmit: (searchQuery: string) => void;\r\n};\r\nexport default function Searchbar({ onSearchbarSubmit }: TProps) {\r\n  const classes = useStyles();\r\n\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const onSubmit = (evt: React.FormEvent<HTMLFormElement>) => {\r\n    evt.preventDefault();\r\n    if (searchQuery.trim() === \"\") {\r\n      toast(\"Type something to find.\");\r\n      return;\r\n    }\r\n    onSearchbarSubmit(searchQuery.toLowerCase());\r\n    setSearchQuery(\"\");\r\n  };\r\n  return (\r\n    <div className={classes.searchBar}>\r\n      <form\r\n        className={classes.root}\r\n        onSubmit={onSubmit}\r\n        noValidate\r\n        autoComplete=\"off\"\r\n      >\r\n        <Input\r\n          placeholder=\"Search movies\"\r\n          inputProps={{ \"aria-label\": \"description\" }}\r\n          value={searchQuery}\r\n          type=\"text\"\r\n          autoComplete=\"off\"\r\n          autoFocus\r\n          onChange={(e) => setSearchQuery(e.currentTarget.value)}\r\n        />\r\n        <Button\r\n          variant=\"contained\"\r\n          color=\"secondary\"\r\n          size=\"small\"\r\n          type=\"submit\"\r\n          startIcon={<SearchIcon />}\r\n        >\r\n          Search\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n","import { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { ToastContainer } from \"react-toastify\";\r\nimport { List, Button, ListItem } from \"@material-ui/core\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\n\r\nimport * as moviesAPI from \"../services/movie-api\";\r\nimport Searchbar from \"../Components/Searchbar/Searchbar\";\r\nimport Status from \"../services/Status\";\r\nimport s from \"../views/MoviesView.module.css\";\r\nimport { classicNameResolver } from \"typescript\";\r\n\r\ntype TSearchQuery = string;\r\ntype TMovie = {\r\n  id: string;\r\n  name: string;\r\n  title: string;\r\n  poster_path: string;\r\n  release_date: string;\r\n};\r\n\r\nexport default function MoviesView() {\r\n  const history = useHistory();\r\n  const location = useLocation();\r\n\r\n  const [movieQuery, setMovieQuery] = useState(\r\n    new URLSearchParams(location.search).get(\"query\") ?? \"\"\r\n  );\r\n  const [queryPage, setQueryPage] = useState(1);\r\n  const [movies, setMovies] = useState<TMovie[]>([]);\r\n  const [status, setStatus] = useState(Status.IDLE);\r\n  const [error, setError] = useState(\"\");\r\n\r\n  const onSearchbarSubmit = (data: TSearchQuery) => {\r\n    history.push({ ...location, search: `query=${data}` });\r\n    setMovieQuery(data);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setQueryPage(1);\r\n    setMovies([]);\r\n  }, [movieQuery]);\r\n\r\n  const onLoadMoreBtn = () => setQueryPage((prevState) => prevState + 1);\r\n\r\n  useEffect(() => {\r\n    if (movieQuery === \"\") {\r\n      return;\r\n    }\r\n    setStatus(Status.PENDING);\r\n    moviesAPI\r\n      .fetchMoviesByQuery(movieQuery, queryPage)\r\n      .then(({ results }) => {\r\n        setMovies((prevState) => [...prevState, ...results]);\r\n        setStatus(Status.RESOLVED);\r\n        window.scrollTo({\r\n          top: document.documentElement.scrollHeight,\r\n          behavior: \"smooth\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        setError(error);\r\n        setStatus(Status.REJECTED);\r\n      });\r\n  }, [movieQuery, queryPage]);\r\n\r\n  return (\r\n    <>\r\n      <Searchbar onSearchbarSubmit={onSearchbarSubmit} />\r\n      <ToastContainer autoClose={3000} position=\"top-center\" />\r\n\r\n      {status === Status.PENDING && <p>Download movie collection</p>}\r\n      {status === Status.REJECTED && <p>{error}</p>}\r\n      {status === Status.RESOLVED && (\r\n        <>\r\n          <List>\r\n            {movies.length < 1 && (\r\n              <div className={s.listNotification}>\r\n                No results for your request.\r\n              </div>\r\n            )}\r\n            {movies.map((movie) => (\r\n              <ListItem key={movie.id} className={s.item}>\r\n                <Link\r\n                  className={s.title}\r\n                  to={{\r\n                    pathname: `/movies/${movie.id}`,\r\n                    state: { from: location },\r\n                  }}\r\n                >\r\n                  {movie.title}\r\n                </Link>\r\n              </ListItem>\r\n            ))}\r\n          </List>\r\n          {movies.length > 0 && (\r\n            <Button onClick={onLoadMoreBtn} variant=\"outlined\">\r\n              Load more\r\n              <GetAppIcon fontSize=\"small\" />\r\n            </Button>\r\n          )}\r\n        </>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n"],"sourceRoot":""}